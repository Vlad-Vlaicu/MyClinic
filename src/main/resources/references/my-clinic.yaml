openapi: 3.0.3
info:
  title: My Clinic
  description: My Clinic APIs
  version: 1.0.0
security:
  - BearerAuth: []
paths:
  /api/v1/my-clinic/login:
    post:
      summary: Receive Login Request
      description: This API provides the login request
      operationId: login
      tags:
        - my-clinic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/my-clinic/register:
    post:
      summary: Create a new user account
      description: This API is called to create a new User account
      operationId: registerUser
      tags:
        - my-clinic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/my-clinic/getAccountInfo:
    get:
      summary: Get account info
      description: This API is called to retrieve account info
      operationId: getAccountData
      tags:
        - my-clinic
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInfo'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/my-clinic/createTicket:
    post:
      summary: Create a ticket
      description: This API is called when a client want to create a new ticket
      operationId: createTicket
      tags:
        - my-clinic
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                type: string
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/my-clinic/getTicket/{ticketId}:
    get:
      summary: API to get Ticket by Id
      description: This API fetches the ticket with the id ticketId
      operationId: getTicketWithId
      tags:
        - my-clinic
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: ticketId
          schema:
            type: number
          required: true
          description: The ticket id
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketInfo'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/my-clinic/getPaymentInfo/{paymentId}:
    get:
      summary: API to get Ticket by Id
      description: This API fetches the ticket with the id ticketId
      operationId: getPaymentWithId
      tags:
        - my-clinic
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: paymentId
          schema:
            type: number
          required: true
          description: The payment id
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInfo'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/my-clinic/payTicket/{ticketId}:
    post:
      summary: API to pay the ticket
      description: This API receives as parameter the ticket id and executes the payment
      operationId: payTicket
      tags:
        - my-clinic
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: ticketId
          schema:
            type: number
          required: true
          description: The ticket id
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInfo'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    LoginRequest:
      type: object
      description: Login user data
      properties:
        email:
          type: string
          description: User's email
          example: email@email.com
        password:
          type: string
          description: User's password
          example: admin1234
      required:
        - email
        - password

    RegisterRequest:
      type: object
      description: Register new user data
      properties:
        name:
          type: string
          description: User's name
          example: Vlad
        email:
          type: string
          description: User's email
          example: email@email.com
        password:
          type: string
          description: User's password
          example: admin1234
        phoneNumber:
          type: string
          description: User's phone number
          example: 07208381237
        cnp:
          type: string
          description: User's cnp
          example: 5010118283948
        birthday:
          type: string
          description: User's birthday
          example: 18.04.1954
      required:
        - email
        - password
        - phoneNumber
        - cnp
        - name

    CreateTicketRequest:
      type: object
      properties:
        productId:
          type: number
        period:
          type: string
        paymentType:
          $ref: '#/components/schemas/PaymentType'
      required:
        - productId
        - period
        - paymentType

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: number

    AccountInfo:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        creation_date:
          type: string
        phoneNumber:
          type: string
        cnp:
          type: string
        birthday:
          type: string
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketInfo'

    TicketInfo:
      type: object
      properties:
        id:
          type: number
        productId:
          type: number
        creationDate:
          type: string
        period:
          type: string
        paymentId:
          type: number
        ticketStatus:
          type: string
        doctorId:
          type: number

    ProductInfo:
      type: object
      properties:
        productId:
          type: number
        name:
          type: string
        description:
          type: string
        price:
          type: string
        productCategory:
          type: string

    PaymentInfo:
      type: object
      properties:
        id:
          type: number
        executionDate:
          type: string
        productId:
          type: number
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        paymentStatus:
          type: string
        additionalData:
          type: string

    PaymentType:
      type: string
      enum:
        - CNAS
        - IN_PERSON

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: error code
          example: TECHNICAL_ERROR
        message:
          type: string
          description: Free-form text message describing the error condition
          example: Input parameters validation failed

  responses:
    ClientError:
      description: bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

